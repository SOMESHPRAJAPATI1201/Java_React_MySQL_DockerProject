version: 2.1

executors:
  maven-executor:
    docker:
      - image: cimg/openjdk:22.0
      - image: mysql:8.0  # Add MySQL service
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: newdb
    working_directory: ~/project

  node-executor:
    docker:
      - image: cimg/node:18.18.0
    working_directory: ~/project/frontend

  docker-executor:
    docker:
      - image: docker:20.10.24
    working_directory: ~/project

jobs:
  build-backend:
    executor: maven-executor
    steps:
      - checkout

      # Wait for MySQL to be ready
      - run:
          name: Wait for MySQL
          command: |
            echo "Waiting for MySQL..."
            until mysql -h 127.0.0.1 -uroot -proot -e "SELECT 1"; do
              sleep 5
            done
            echo "MySQL is up and running!"

      # Restore Maven dependencies
      - restore_cache:
          keys:
            - maven-deps-{{ checksum "pom.xml" }}
            - maven-deps

      # Build & Test Spring Boot App
      - run:
          name: Build & Test Spring Boot App
          command: mvn clean package -DskipTests=false

      # Save Maven dependencies
      - save_cache:
          paths:
            - ~/.m2
          key: maven-deps-{{ checksum "pom.xml" }}

      # Store test results
      - store_test_results:
          path: target/surefire-reports

      # Store built JAR file
      - store_artifacts:
          path: target/TestDockerProject-0.0.1-SNAPSHOT.jar

  build-frontend:
    executor: node-executor
    steps:
      - checkout

      # Restore Node.js dependencies from cache
      - restore_cache:
          keys:
            - node-deps-{{ checksum "package-lock.json" }}
            - node-deps

      # Install dependencies
      - run:
          name: Install Dependencies
          command: npm install

      # Cache Node.js dependencies
      - save_cache:
          paths:
            - node_modules
          key: node-deps-{{ checksum "package-lock.json" }}

      # Run tests
      - run:
          name: Run Frontend Tests
          command: npm test

      # Build the frontend
      - run:
          name: Build Frontend
          command: npm run build

      # Store frontend build artifacts
      - store_artifacts:
          path: dist

  docker-build-backend:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24

      # Build backend Docker image
      - run:
          name: Build Backend Docker Image
          command: docker build -t somesh11/backend-img -f Dockerfile.backend .

      # Push backend image to Docker Hub
      - run:
          name: Push Backend Docker Image
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push somesh11/backend-img

  docker-build-frontend:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24

      # Build frontend Docker image
      - run:
          name: Build Frontend Docker Image
          command: docker build -t somesh11/frontend-img -f Dockerfile.frontend .

      # Push frontend image to Docker Hub
      - run:
          name: Push Frontend Docker Image
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push somesh11/frontend-img

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-backend
      - build-frontend
      - docker-build-backend:
          requires:
            - build-backend
      - docker-build-frontend:
          requires:
            - build-frontend
